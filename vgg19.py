# -*- coding: utf-8 -*-
"""VGG19.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Lp_F3KXJfJrBYaklMosKUIYojzQG5lzU
"""

from google.colab import drive
drive.mount('/content/drive')

from keras.layers import Input, Lambda, Dense, Flatten
from keras.models import Model
from keras.applications.vgg19 import VGG19
from keras.applications.vgg19 import preprocess_input
from keras.preprocessing import image
from keras.preprocessing.image import ImageDataGenerator
from keras.models import Sequential
import numpy as np
from glob import glob
import matplotlib.pyplot as plt
from tensorflow.keras import layers, models

IMAGE_SIZE = [224, 224]
train_path = '/content/drive/MyDrive/Capstone/Contrast_ROI_aug_T/train'
valid_path = '/content/drive/MyDrive/Capstone/Contrast_ROI_aug_T/val'

vgg = VGG19(input_shape=IMAGE_SIZE+ [3], weights='imagenet', include_top=False)

for layer in vgg.layers:
  layer.trainable = False

vgg.summary()

folders = glob('/content/drive/MyDrive/Capstone/Contrast_ROI_aug_T/train/*')

model = models.Sequential(
    [
     vgg,
     layers.Flatten(),
     Dense(len(folders), activation='softmax')
    ]
)

model.summary()

model.compile(
    loss= 'categorical_crossentropy',
    optimizer='adam',
    metrics=['accuracy']
)

from keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(rescale = 1./255,
                                    shear_range = 0.2,
                                    zoom_range = 0.2,
                                    horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/MyDrive/Capstone/Contrast_ROI_aug_T/train',
                                                  target_size = (224, 224),
                                                  batch_size = 16,
                                                  class_mode= 'categorical')

test_set = test_datagen.flow_from_directory('/content/drive/MyDrive/Capstone/Contrast_ROI_aug_T/test',
                                            target_size = (224, 224),
                                            batch_size = 16,
                                            class_mode= 'categorical')

r = model.fit(
            training_set,
            validation_data=test_set,
            epochs = 20,
            steps_per_epoch= len(training_set),
            validation_steps = len(test_set)
)

model.save('contrast_ROI_aug_D_vgg19_224_16.h5')

from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, classification_report
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Load your VGG16 model
model = load_model('/content/contrast_ROI_aug_D_vgg19_224_16.h5')  # Replace with the actual path to your model

# Specify the path to your test dataset
test_data_dir = '/content/drive/MyDrive/Capstone/Contrast_ROI_aug_T/test'  # Replace with the actual path to your test data

# Create an ImageDataGenerator for test data
test_datagen = ImageDataGenerator(rescale=1./255)
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(224, 224),
    batch_size=16,
    class_mode='categorical',  # Adjust if your task is binary or different
    shuffle=False
)

# Make predictions on the test set
y_pred = model.predict(test_generator)

# Convert predicted probabilities to class labels
y_pred_classes = y_pred.argmax(axis=-1)
y_true = test_generator.classes

# Calculate and print metrics
accuracy = accuracy_score(y_true, y_pred_classes)
precision = precision_score(y_true, y_pred_classes, average='weighted')
recall = recall_score(y_true, y_pred_classes, average='weighted')
f1 = f1_score(y_true, y_pred_classes, average='weighted')

print(f'Accuracy: {accuracy:.4f}')
print(f'Precision: {precision:.4f}')
print(f'Recall: {recall:.4f}')
print(f'F1 Score: {f1:.4f}')

# Print detailed classification report
class_names = list(test_generator.class_indices.keys())
print('\nClassification Report:')
print(classification_report(y_true, y_pred_classes, target_names=class_names))